/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;

import processing.core.PApplet;
import processing.core.PImage;

public class AppTest {
  
  @BeforeEach
  public void setup() {
    PrintWriter writer = null;
    try {
      writer = new PrintWriter("basic.json");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
    writer.println("{");
    writer.println("    \"map\": \"simple_chaser.txt\",");
    writer.println("    \"lives\": 3,");
    writer.println("    \"speed\": 1,");
    writer.println("    \"frightenedLength\": 1,");
    writer.println("    \"invisLength\": 1,");
    writer.println("    \"modeLengths\": [");
    writer.println("        3,\n        5,\n        5,\n        20\n    ]\n}");
    writer.flush();
    writer.close();

    try {
      writer = new PrintWriter("simple_chaser.txt");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }

    writer.print("0000000000000000000000000000\n0000000000000000000000000000\n" + 
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000611111111111500000000\n" +
            "000000028777777777s200000000\n0000000276115761157200000000\n" +
            "0000000272002720027200000000\n0000000272002720027200000000\n" +
            "0000000274113741137200000000\n0000000277777p7777c200000000\n" +
            "0000000276115761157200000000\n0000000272002720027200000000\n" +
            "0000000272002720027200000000\n0000000274113741137200000000\n" +
            "0000000277777777777200000000\n0000000411111111111300000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n" +
            "0000000000000000000000000000\n0000000000000000000000000000\n");
    writer.close();
  }

  @AfterEach
  public void takedown() {
    File basic = new File("basic.json");
    basic.delete();
    File simpleMovement = new File("simple_chaser.txt");
    simpleMovement.delete();
  }
  
  /* Testing constructor. */
  @Test 
  public void constructorTest() {
    App classUnderTest = new App();
    assertNotNull(classUnderTest);
  }

  /* Testing if the application can load all images. */
  @Test
  public void loadTest() {
    App app = new App() {
      public void exit() {
        ;
      }
    };
    GameManager game = new GameManager(app, "basic.json");
    PApplet.runSketch(new String[]{"App"}, app);
    game.setup();
    app.settings();

    /* If images are not null, they must be loaded in correctly. */
    Cell[][] cells = game.getCells();
    for (Cell[] row : cells) {
      for (Cell c : row) {
        if (c != null) {
          if (c.getID() != '0' && c.getID() != 'p' && c.getID() != 'a' && c.getID() != 'i' &&
                  c.getID() != 'c' && c.getID() != 'w') {
            assertNotNull(((Interactable)c).getImage());
          }
        }
      }
    }

    Waka waka = game.getWaka();
    assertNotNull(waka.getCurrentSprite());
    for (PImage p : waka.getAllSprites()) {
      assertNotNull(p);
    }

    for (Ghost g : game.getGhosts()) {
      assertNotNull(g.getCurrentSprite());
    }
    app.dispose();
  }
}
